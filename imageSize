#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Show the image width and height (tab-separated) (or relative to DIFF-FILE) of
all passed IMAGE-FILE(s) (with appended filename if multiple are given).
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-d|--diff DIFF-FILE] [--] IMAGE-FILE [...] [-?|-h|--help]'
    echo
    cat <<HELPTEXT
Test whether both width and height of [all] IMAGE-FILE[s] is greater / smaller
than SIZE|WxH.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '-g|--greater|-s|--smaller|-lt|-le|-eq|-ne|-ge|-gt SIZE|WxH [--] IMAGE-FILE [...]'
    echo
    cat <<HELPTEXT
EXIT STATUS:
    0	Complete success.
    1	The comparison failed; at least one FILE did not pass it.
    2	Bad invocation, wrong or missing command-line arguments.
    4	Some of the passed FILE(s) do not exist.
HELPTEXT
}

getDimensions()
{
    local format=$'%w\t%h\n'
    [ $# -gt 1 ] && format="${format%$'\n'}"$'\t%f\n'

    identify -ping -format "$format" -- "$@" || return 4
}

parseDimensions()
{
    if [[ "${1:?}" =~ ^([[:digit:]]+)x([[:digit:]]+)$ ]]; then
	width=${BASH_REMATCH[1]}
	height=${BASH_REMATCH[2]}
    elif [[ "$1" =~ ^[[:digit:]]+$ ]]; then
	height=$1
	width=$1
    else
	echo "ERROR: Invalid SIZE|WxH: $1"
	echo
	printUsage "$0"
	exit 2
    fi >&2
}

compareOp=
diffHeight=
diffWidth=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--diff|-d)	shift; { IFS=$'\t' read -r diffWidth diffHeight || { exit $diffHeight; }; } < <(getDimensions "$1"); shift;;
	--greater|-g)	shift; parseDimensions "$1"; shift; compareOp=-gt;;
	--smaller|-s)	shift; parseDimensions "$1"; shift; compareOp=-lt;;
	-lt|-le|-eq|-ne|-ge|-gt)
			compareOp="$1"; shift; parseDimensions "$1"; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -eq 0 ]; then
    printUsage "$0" >&2
    exit 2
fi

if [ -n "$compareOp" ]; then
    exitStatus=3
    compareStatus=0
    while IFS=$'\t' read -r fileWidth fileHeight filespec || { exitStatus="$fileWidth"; break; }	# Exit status from the process substitution (<(getDimensions)) is lost; return the actual exit status via an incomplete (i.e. missing the newline) last line.
    do
	[ $fileWidth $compareOp $width -a $fileHeight $compareOp $height ] || compareStatus=1
    done < <(getDimensions "$@"; printf %d "$?")
    exit $((exitStatus > 0 ? exitStatus : compareStatus))
elif [ -n "$diffWidth" -a -n "$diffHeight" ]; then
    exitStatus=3
    while IFS=$'\t' read -r fileWidth fileHeight filespec || { exitStatus="$fileWidth"; break; }	# Exit status from the process substitution (<(getDimensions)) is lost; return the actual exit status via an incomplete (i.e. missing the newline) last line.
    do
	printf "%d\\t%d${filespec:+\\t}%s\\n" "$((fileWidth - diffWidth))" "$((fileHeight - diffHeight))" "$filespec"
    done < <(getDimensions "$@"; printf %d "$?")
    exit $exitStatus
else
    getDimensions "$@"
fi
