#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Show the image aspect ratio in percent (relative to DIFF-FILE) of all passed
IMAGE-FILE(s) (with appended filename if multiple are given). 100 means
quadratic; 200 means twice as wide as high; 50 means twice as high as wide.
HELPTEXT
    echo
    printf "Usage: %q %s\\n" "$(basename "$1")" '[-d|--diff DIFF-FILE] [--] IMAGE-FILE [...] [-?|-h|--help]'
    echo
    cat <<HELPTEXT
Test whether the aspect ratio of [all] IMAGE-FILE[s] is greater / smaller than
PERCENTAGE.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '-g|--greater|-s|--smaller|-lt|-le|-eq|-ne|-ge|-gt PERCENTAGE [--] IMAGE-FILE [...]'
    echo
    cat <<HELPTEXT
EXIT STATUS:
    0	Complete success.
    1	The comparison failed; at least one FILE did not pass it.
    2	Bad invocation, wrong or missing command-line arguments.
    4	Some of the passed FILE(s) do not exist.
HELPTEXT
}

getRatio()
{
    local format=$'%w\t%h\n'
    [ $# -gt 1 ] && format="${format%$'\n'}"$'\t%f\n'

    local width height filespec exitStatus=
    while IFS=$'\t' read -r width height filespec || { exitStatus="$width"; break; }	# Exit status from the process substitution (<(identify)) is lost; return the actual exit status via an incomplete (i.e. missing the newline) last line.
    do
	local ratio=$((100 * width / height))
	printf "%d${filespec:+\\t}%s\\n" "$ratio" "$filespec"
    done < <(identify -ping -format "$format" -- "$@" && printf 0 || printf 4)
    return $exitStatus
}

compareOp=
diffRatio=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--diff|-d)	shift; diffRatio="$(getRatio "${1:?}")" || exit $?; shift;;
	--greater|-g)	shift; ratio="${1:?}"; shift; compareOp=-gt;;
	--smaller|-s)	shift; ratio="${1:?}"; shift; compareOp=-lt;;
	-lt|-le|-eq|-ne|-ge|-gt)
			compareOp="$1"; shift; ratio="${1:?}"; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -eq 0 ]; then
    printUsage "$0" >&2
    exit 2
fi

if [ -n "$compareOp" ]; then
    exitStatus=3
    compareStatus=0
    while IFS=$'\t' read -r fileRatio filespec || { exitStatus="$fileRatio"; break; }	# Exit status from the process substitution (<(getRatio)) is lost; return the actual exit status via an incomplete (i.e. missing the newline) last line.
    do
	[ $fileRatio $compareOp $ratio ] || compareStatus=1
    done < <(getRatio "$@"; printf %d "$?")
    exit $((exitStatus > 0 ? exitStatus : compareStatus))
elif [ -n "$diffRatio" ]; then
    exitStatus=3
    while IFS=$'\t' read -r fileRatio filespec || { exitStatus="$fileRatio"; break; }	# Exit status from the process substitution (<(getRatio)) is lost; return the actual exit status via an incomplete (i.e. missing the newline) last line.
    do
	printf "%d${filespec:+\\t}%s\\n" "$((fileRatio - diffRatio))" "$filespec"
    done < <(getRatio "$@"; printf %d "$?")
    exit $exitStatus
else
    getRatio "$@"
fi
